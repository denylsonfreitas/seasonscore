rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isUsernameUnique(username) {
      let existingUsers = getAfter(/databases/$(database)/documents/users)
        .where("username", "==", username).limit(1);
      return existingUsers.size() == 0 || 
        (existingUsers.size() == 1 && existingUsers[0].id == request.auth.uid);
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read;
      allow create: if request.auth != null && 
        request.auth.uid == userId && 
        request.resource.data.username is string &&
        request.resource.data.username.size() > 0;
      allow update: if request.auth != null && 
        request.auth.uid == userId;
      allow delete: if request.auth != null && 
        request.auth.uid == userId;
    }
    
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        (
          request.resource.data.seriesId == resource.data.seriesId &&
          request.resource.data.userId == resource.data.userId &&
          request.resource.data.seasonReviews.size() == resource.data.seasonReviews.size()
        )
      );
      allow delete: if request.auth != null && 
        resource.data.userId == request.auth.uid;
    }
    
    match /watchlist/{docId} {
      allow read;
      allow create: if request.auth != null && 
        docId.matches(request.auth.uid + '_.*');
      allow delete: if request.auth != null && 
        (docId.matches(request.auth.uid + '_.*') || 
        resource.data.userId == request.auth.uid);
    }

    match /followers/{followerId} {
      allow read;
      allow create: if request.auth != null;
      allow delete: if request.auth != null && 
        (resource.data.followerId == request.auth.uid || 
        resource.data.followingId == request.auth.uid);
    }
    
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && 
        resource.data.userId == request.auth.uid;
    }
    
    match /series_by_genre/{docId} {
      allow read: if true;
    }
    
    match /lastNotifiedEpisodes/{docId} {
      allow read: if request.auth != null && 
        docId.matches(request.auth.uid + '_.*');
      allow create, write: if request.auth != null && 
        docId.matches(request.auth.uid + '_.*');
      allow delete: if request.auth != null && 
        docId.matches(request.auth.uid + '_.*');
    }

    match /{collection}/{document=**} {
      allow delete: if request.auth != null && (
        resource.data.userId == request.auth.uid || 
        resource.data.followerId == request.auth.uid || 
        resource.data.followingId == request.auth.uid ||
        document.matches(request.auth.uid + '_.*')
      );
    }
  }
}